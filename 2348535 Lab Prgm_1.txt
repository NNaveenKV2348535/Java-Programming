1. 

import java.util.Scanner;

class Performance {
    int[] marks;

    // Constructor
    public Performance() {
        marks = new int[10];
    }

    // Method to read marks into the array
    public void readMarks() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter marks for 10 students:");

        for (int i = 0; i < 10; i++) {
            marks[i] = scanner.nextInt();
        }
    }

    // Method to find the highest mark
    public int highestMark() {
        int highest = marks[0];
        for (int i = 1; i < marks.length; i++) {
            if (marks[i] > highest) {
                highest = marks[i];
            }
        }
        return highest;
    }

    // Method to find the least mark
    public int leastMark() {
        int least = marks[0];
        for (int i = 1; i < marks.length; i++) {
            if (marks[i] < least) {
                least = marks[i];
            }
        }
        return least;
    }

    // Method to find the mode
    public int getMode() {
        int mode = marks[0];
        int maxFrequency = 1;

        for (int i = 0; i < marks.length; i++) {
            int currentMark = marks[i];
            int currentFrequency = 1;

            for (int j = i + 1; j < marks.length; j++) {
                if (marks[j] == currentMark) {
                    currentFrequency++;
                }
            }

            if (currentFrequency > maxFrequency || (currentFrequency == maxFrequency && currentMark > mode)) {
                mode = currentMark;
                maxFrequency = currentFrequency;
            }
        }

        return mode;
    }

    // Method to find the frequency at mode
    public int getFreqAtMode() {
        int mode = getMode();
        int frequency = 0;

        for (int i = 0; i < marks.length; i++) {
            if (marks[i] == mode) {
                frequency++;
            }
        }

        return frequency;
    }

    // Method to display the result
    public void display() {
        System.out.println("Highest Mark: " + highestMark());
        System.out.println("Least Mark: " + leastMark());
        System.out.println("Mode: " + getMode());
        System.out.println("Frequency at Mode: " + getFreqAtMode());
    }
}

public class Main {
    public static void main(String[] args) {
        Performance performance = new Performance();
        performance.readMarks();
        performance.display();
    }
}



2. 

import java.util.Scanner;

public class AlphabetWarGame {

    private static final int W_STRENGTH = 4;
    private static final int P_STRENGTH = 3;
    private static final int B_STRENGTH = 2;
    private static final int S_STRENGTH = 1;
    private static final int M_STRENGTH = 4;
    private static final int Q_STRENGTH = 3;
    private static final int D_STRENGTH = 2;
    private static final int Z_STRENGTH = 1;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the left word: ");
        String leftWord = scanner.next();

        System.out.println("Enter the right word: ");
        String rightWord = scanner.next();

        // Validate the input
        if (!isValidWord(leftWord) || !isValidWord(rightWord)) {
            System.out.println("Please enter valid words.");
            System.exit(1);
        }

        // Determine the winner
        int leftScore = calculateScore(leftWord);
        int rightScore = calculateScore(rightWord);

        if (leftScore > rightScore) {
            System.out.println("Left side wins!");
        } else if (leftScore < rightScore) {
            System.out.println("Right side wins!");
        } else {
            System.out.println("Let's fight again!");
        }
    }

    private static boolean isValidWord(String word) {
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }

    private static int calculateScore(String word) {
        int score = 0;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            switch (c) {
                case 'w':
                    score += W_STRENGTH;
                    break;
                case 'p':
                    score += P_STRENGTH;
                    break;
                case 'b':
                    score += B_STRENGTH;
                    break;
                case 's':
                    score += S_STRENGTH;
                    break;
                case 'm':
                    score += M_STRENGTH;
                    break;
                case 'q':
                    score += Q_STRENGTH;
                    break;
                case 'd':
                    score += D_STRENGTH;
                    break;
                case 'z':
                    score += Z_STRENGTH;
                    break;
            }
        }
        return score;
    }
}

