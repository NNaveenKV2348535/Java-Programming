1. 

import java.util.Scanner;

class Performance {
    int[] marks;

    // Constructor
    public Performance() {
        marks = new int[10];
    }

    // Method to read marks into the array
    public void readMarks() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter marks for 10 students:");

        for (int i = 0; i < 10; i++) {
            marks[i] = scanner.nextInt();
        }
    }

    // Method to find the highest mark
    public int highestMark() {
        int highest = marks[0];
        for (int i = 1; i < marks.length; i++) {
            if (marks[i] > highest) {
                highest = marks[i];
            }
        }
        return highest;
    }

    // Method to find the least mark
    public int leastMark() {
        int least = marks[0];
        for (int i = 1; i < marks.length; i++) {
            if (marks[i] < least) {
                least = marks[i];
            }
        }
        return least;
    }

    // Method to find the mode
    public int getMode() {
        int mode = marks[0];
        int maxFrequency = 1;

        for (int i = 0; i < marks.length; i++) {
            int currentMark = marks[i];
            int currentFrequency = 1;

            for (int j = i + 1; j < marks.length; j++) {
                if (marks[j] == currentMark) {
                    currentFrequency++;
                }
            }

            if (currentFrequency > maxFrequency || (currentFrequency == maxFrequency && currentMark > mode)) {
                mode = currentMark;
                maxFrequency = currentFrequency;
            }
        }

        return mode;
    }

    // Method to find the frequency at mode
    public int getFreqAtMode() {
        int mode = getMode();
        int frequency = 0;

        for (int i = 0; i < marks.length; i++) {
            if (marks[i] == mode) {
                frequency++;
            }
        }

        return frequency;
    }

    // Method to display the result
    public void display() {
        System.out.println("Highest Mark: " + highestMark());
        System.out.println("Least Mark: " + leastMark());
        System.out.println("Mode: " + getMode());
        System.out.println("Frequency at Mode: " + getFreqAtMode());
    }
}

public class Main {
    public static void main(String[] args) {
        Performance performance = new Performance();
        performance.readMarks();
        performance.display();
    }
}


2. 

import java.util.Scanner;

class LetterBattle {
    // Strength of each letter
    private int[] leftStrength;
    private int[] rightStrength;

    // Constructor to set default strengths
    public LetterBattle() {
        leftStrength = new int[]{4, 3, 2, 1};
        rightStrength = new int[]{4, 3, 2, 1};
    }

    // Constructor to customize strengths
    public LetterBattle(int[] leftStrength, int[] rightStrength) {
        this.leftStrength = leftStrength;
        this.rightStrength = rightStrength;
    }

    // Method to determine the winner using a single word
    public String determineWinner(String word) {
        int leftSideStrength = 0;
        int rightSideStrength = 0;

        for (char letter : word.toCharArray()) {
            if (letter >= 'a' && letter <= 'z') {
                rightSideStrength += rightStrength[letter - 'a'];
            } else if (letter >= 'A' && letter <= 'Z') {
                leftSideStrength += leftStrength[letter - 'A'];
            }
        }

        if (leftSideStrength > rightSideStrength) {
            return "Left side wins!";
        } else if (leftSideStrength < rightSideStrength) {
            return "Right side wins!";
        } else {
            return "Let's fight again!";
        }
    }

    // Method to determine the winner using separate left and right words
    public String determineWinner(String leftWord, String rightWord) {
        int leftSideStrength = 0;
        int rightSideStrength = 0;

        for (char letter : leftWord.toCharArray()) {
            if (letter >= 'a' && letter <= 'z') {
                rightSideStrength += rightStrength[letter - 'a'];
            } else if (letter >= 'A' && letter <= 'Z') {
                leftSideStrength += leftStrength[letter - 'A'];
            }
        }

        for (char letter : rightWord.toCharArray()) {
            if (letter >= 'a' && letter <= 'z') {
                rightSideStrength += rightStrength[letter - 'a'];
            } else if (letter >= 'A' && letter <= 'Z') {
                leftSideStrength += leftStrength[letter - 'A'];
            }
        }

        if (leftSideStrength > rightSideStrength) {
            return "Left side wins!";
        } else if (leftSideStrength < rightSideStrength) {
            return "Right side wins!";
        } else {
            return "Let's fight again!";
        }
    }

    // Getters for leftStrength and rightStrength
    public int[] getLeftStrength() {
        return leftStrength;
    }

    public int[] getRightStrength() {
        return rightStrength;
    }

    // Setters for leftStrength and rightStrength
    public void setLeftStrength(int[] leftStrength) {
        this.leftStrength = leftStrength;
    }

    public void setRightStrength(int[] rightStrength) {
        this.rightStrength = rightStrength;
    }
}

public class AlphabetWar {
    public static void main(String[] args) {
        LetterBattle game = new LetterBattle();

        Scanner scanner = new Scanner(System.in);

        do {
            System.out.print("Enter your word: ");
            String word = scanner.nextLine();

            String result = game.determineWinner(word);
            System.out.println(result);

            System.out.print("Do you want to continue? (y/n): ");
        } while (scanner.nextLine().toLowerCase().charAt(0) == 'y');
    }
}
